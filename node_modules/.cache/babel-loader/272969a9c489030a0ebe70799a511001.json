{"ast":null,"code":"var _jsxFileName = \"/home/rafaelle.xavier/Documentos/visitenos-form-insa/form-app/src/index.js\";\nimport React from 'react';\nimport { useFormik } from 'formik';\nimport { render } from \"react-dom\";\nimport { Formik } from \"formik\";\nimport \"./index.css\";\n\nconst validate = values => {\n  const errors = {};\n\n  if (!values.intituicaoVisitante) {\n    errors.intituicaoVisitante = 'Instituição Visitante não pode ser vazio';\n  }\n\n  if (!values.lastName) {\n    errors.lastName = 'Required';\n  } else if (values.lastName.length > 20) {\n    errors.lastName = 'Must be 20 characters or less';\n  }\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  return errors;\n};\n\nconst INSAForm = () => {\n  // Notice that we have to initialize ALL of fields with values. These\n  // could come from props, but since we don't want to prefill this form,\n  // we just use an empty string. If you don't do this, React will yell\n  // at you.\n  const formik = useFormik({\n    initialValues: {\n      intituicaoVisitante: '',\n      email: '',\n      lastName: ''\n    },\n    validate,\n    onSubmit: values => {\n      alert(JSON.stringify(values, null, 2));\n    }\n  });\n  return React.createElement(\"form\", {\n    onSubmit: formik.handleSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"intituicaoVisitante\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Nome do respons\\xE1vel\"), React.createElement(\"input\", {\n    id: \"intituicaoVisitante\",\n    name: \"intituicaoVisitante\",\n    type: \"text\",\n    onChange: formik.handleChange,\n    onBlur: formik.handleBlur,\n    value: formik.values.intituicaoVisitante,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }), formik.touched.intituicaoVisitante && formik.errors.intituicaoVisitante ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, formik.errors.intituicaoVisitante) : null, React.createElement(\"div\", {\n    className: \"flex-column\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"element-form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"intituicaoVisitante\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, \"Telefone da institui\\xE7\\xE3o visitante\"), React.createElement(\"input\", {\n    id: \"intituicaoVisitante\",\n    name: \"intituicaoVisitante\",\n    type: \"text\",\n    onChange: formik.handleChange,\n    onBlur: formik.handleBlur,\n    value: formik.values.intituicaoVisitante,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }), formik.touched.intituicaoVisitante && formik.errors.intituicaoVisitante ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }, formik.errors.intituicaoVisitante) : null), React.createElement(\"div\", {\n    className: \"element-form\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"intituicaoVisitante\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, \"email da institui\\xE7\\xE3o visita\"), React.createElement(\"input\", {\n    id: \"intituicaoVisitante\",\n    name: \"intituicaoVisitante\",\n    type: \"text\",\n    onChange: formik.handleChange,\n    onBlur: formik.handleBlur,\n    value: formik.values.intituicaoVisitante,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), formik.touched.intituicaoVisitante && formik.errors.intituicaoVisitante ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, formik.errors.intituicaoVisitante) : null))), React.createElement(\"button\", {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"Submit\"));\n};\n\nrender(React.createElement(INSAForm, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 105\n  },\n  __self: this\n}), document.getElementById(\"root\"));\n/*\n  <label htmlFor=\"firstName\">Nome do responsável</label>\n  <input\n    id=\"firstName\"\n    name=\"firstName\"\n    type=\"text\"\n    onChange={formik.handleChange}\n    onBlur={formik.handleBlur}\n    value={formik.values.firstName}\n  />\n  {formik.touched.firstName && formik.errors.firstName ? (\n    <div>{formik.errors.firstName}</div>\n  ) : null}\n  <label htmlFor=\"email\">Email do responsável pela visita</label>\n  <input\n    id=\"email\"\n    name=\"email\"\n    type=\"email\"\n    onChange={formik.handleChange}\n    onBlur={formik.handleBlur}\n    value={formik.values.email}\n  />\n  {formik.touched.email && formik.errors.email ? (\n    <div>{formik.errors.email}</div>\n  ) : null}\n  <label htmlFor=\"lastName\">Instituição que fará a visita</label>\n  <input\n    id=\"lastName\"\n    name=\"lastName\"\n    type=\"text\"\n    onChange={formik.handleChange}\n    onBlur={formik.handleBlur}\n    value={formik.values.lastName}\n  />\n  {formik.touched.lastName && formik.errors.lastName ? (\n    <div>{formik.errors.lastName}</div>\n  ) : null}*/","map":{"version":3,"sources":["/home/rafaelle.xavier/Documentos/visitenos-form-insa/form-app/src/index.js"],"names":["React","useFormik","render","Formik","validate","values","errors","intituicaoVisitante","lastName","length","email","test","INSAForm","formik","initialValues","onSubmit","alert","JSON","stringify","handleSubmit","handleChange","handleBlur","touched","document","getElementById"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useFormik } from 'formik';\n\nimport { render } from \"react-dom\";\nimport { Formik } from \"formik\";\n\nimport \"./index.css\";\n\n\nconst validate = values => {\n  const errors = {};\n  if (!values.intituicaoVisitante) {\n    errors.intituicaoVisitante = 'Instituição Visitante não pode ser vazio';\n  }\n\n  if (!values.lastName) {\n    errors.lastName = 'Required';\n  } else if (values.lastName.length > 20) {\n    errors.lastName = 'Must be 20 characters or less';\n  }\n\n  if (!values.email) {\n    errors.email = 'Required';\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    errors.email = 'Invalid email address';\n  }\n\n  return errors;\n};\n\nconst INSAForm = () => {\n  // Notice that we have to initialize ALL of fields with values. These\n  // could come from props, but since we don't want to prefill this form,\n  // we just use an empty string. If you don't do this, React will yell\n  // at you.\n  const formik = useFormik({\n    initialValues: {\n      intituicaoVisitante: '',\n      email: '',\n      lastName: '',\n    },\n    validate,\n    onSubmit: values => {\n      alert(JSON.stringify(values, null, 2));\n    },\n  });\n  return (\n    <form onSubmit={formik.handleSubmit}>\n      <div>\n        <label htmlFor=\"intituicaoVisitante\">Nome do responsável</label>\n        <input\n          id=\"intituicaoVisitante\"\n          name=\"intituicaoVisitante\"\n          type=\"text\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.intituicaoVisitante}\n        />\n        {formik.touched.intituicaoVisitante && formik.errors.intituicaoVisitante ? (\n          <div>{formik.errors.intituicaoVisitante}</div>\n        ) : null}\n\n        <div className=\"flex-column\">\n          <div className=\"element-form\">\n\n          <label htmlFor=\"intituicaoVisitante\">Telefone da instituição visitante</label>\n          <input\n            id=\"intituicaoVisitante\"\n            name=\"intituicaoVisitante\"\n            type=\"text\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.intituicaoVisitante}\n          />\n          {formik.touched.intituicaoVisitante && formik.errors.intituicaoVisitante ? (\n            <div>{formik.errors.intituicaoVisitante}</div>\n          ) : null}\n          </div>\n          <div className=\"element-form\">\n          <label htmlFor=\"intituicaoVisitante\">email da instituição visita</label>\n          <input\n            id=\"intituicaoVisitante\"\n            name=\"intituicaoVisitante\"\n            type=\"text\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.intituicaoVisitante}\n          />\n          {formik.touched.intituicaoVisitante && formik.errors.intituicaoVisitante ? (\n            <div>{formik.errors.intituicaoVisitante}</div>\n          ) : null}\n\n          </div>\n\n        </div>\n      </div>\n\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n};\n\n\nrender(<INSAForm />, document.getElementById(\"root\"));\n\n/*\n  <label htmlFor=\"firstName\">Nome do responsável</label>\n  <input\n    id=\"firstName\"\n    name=\"firstName\"\n    type=\"text\"\n    onChange={formik.handleChange}\n    onBlur={formik.handleBlur}\n    value={formik.values.firstName}\n  />\n  {formik.touched.firstName && formik.errors.firstName ? (\n    <div>{formik.errors.firstName}</div>\n  ) : null}\n  <label htmlFor=\"email\">Email do responsável pela visita</label>\n  <input\n    id=\"email\"\n    name=\"email\"\n    type=\"email\"\n    onChange={formik.handleChange}\n    onBlur={formik.handleBlur}\n    value={formik.values.email}\n  />\n  {formik.touched.email && formik.errors.email ? (\n    <div>{formik.errors.email}</div>\n  ) : null}\n  <label htmlFor=\"lastName\">Instituição que fará a visita</label>\n  <input\n    id=\"lastName\"\n    name=\"lastName\"\n    type=\"text\"\n    onChange={formik.handleChange}\n    onBlur={formik.handleBlur}\n    value={formik.values.lastName}\n  />\n  {formik.touched.lastName && formik.errors.lastName ? (\n    <div>{formik.errors.lastName}</div>\n  ) : null}*/\n"]},"metadata":{},"sourceType":"module"}